#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LINE 100

typedef struct number {
    int coeff;
    int exp;
    struct number* next;
} Number;

void DeleteAfter(Number*);
void Print(Number*);
Number* InsertSorted(Number*, Number*);
Number* Add(Number*, Number*);
Number* Multiply(Number*, Number*);

void DeleteAfter(Number* node) {
    if (node == NULL || node->next == NULL) return;

    Number* temp = node->next;
    node->next = temp->next;
    free(temp);
}

void Print(Number* head) {
    Number* temp = head;
    while (temp != NULL) {
        printf("%dx^%d", temp->coeff, temp->exp);
        temp = temp->next;
        if (temp != NULL)
            printf(" + ");
    }
    printf("\n");
}

Number* InsertSorted(Number* head, Number* nE) {
    if (head == NULL) {
        return nE;
    }

    Number* temp = head;
    while (temp->next != NULL && temp->next->exp < nE->exp) {
        temp = temp->next;
    }

    if (temp->next == NULL || temp->next->exp != nE->exp) {
        nE->next = temp->next;
        temp->next = nE;
    }
    else {
        int resultCoeff = temp->next->coeff + nE->coeff;
        if (resultCoeff == 0) {
            DeleteAfter(temp);
            free(nE);
        }
        else {
            temp->next->coeff = resultCoeff;
            free(nE);
        }
    }
    return head;
}

Number* Add(Number* poly1, Number* poly2) {
    Number* result = NULL;

    while (poly1 != NULL) {
        Number* newEl1 = (Number*)malloc(sizeof(Number));
        newEl1->coeff = poly1->coeff;
        newEl1->exp = poly1->exp;
        newEl1->next = NULL;
        result = InsertSorted(result, newEl1);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        Number* newEl2 = (Number*)malloc(sizeof(Number));
        newEl2->coeff = poly2->coeff;
        newEl2->exp = poly2->exp;
        newEl2->next = NULL;
        result = InsertSorted(result, newEl2);
        poly2 = poly2->next;
    }

    return result;
}

Number* Multiply(Number* poly1, Number* poly2) {
    Number* result = NULL;

    for (Number* temp1 = poly1; temp1 != NULL; temp1 = temp1->next) {
        for (Number* temp2 = poly2; temp2 != NULL; temp2 = temp2->next) {
            Number* newEl = (Number*)malloc(sizeof(Number));
            newEl->coeff = temp1->coeff * temp2->coeff;
            newEl->exp = temp1->exp + temp2->exp;
            newEl->next = NULL;
            result = InsertSorted(result, newEl);
        }
    }
    return result;
}

int main() {
    Number* poly1 = NULL;
    Number* poly2 = NULL;

    FILE* file = fopen("polinomi.txt", "r");
    if (!file) {
        printf("Error opening file!\n");
        return -1;
    }

    int coeff, exp, numBytes;
    char buffer[MAX_LINE];

    while (fgets(buffer, MAX_LINE, file)) {
        if (strlen(buffer) == 1 && buffer[0] == '\n') {
            break;
        }

        char* ptr = buffer;
        while (sscanf(ptr, "%d %d%n", &coeff, &exp, &numBytes) == 2) {
            ptr += numBytes;

            Number* newEl = (Number*)malloc(sizeof(Number));
            newEl->coeff = coeff;
            newEl->exp = exp;
            newEl->next = NULL;
            poly1 = InsertSorted(poly1, newEl);
        }
    }

    while (fgets(buffer, MAX_LINE, file)) {
        if (strlen(buffer) == 1 && buffer[0] == '\n') {
            break;
        }

        char* ptr = buffer;
        while (sscanf(ptr, "%d %d%n", &coeff, &exp, &numBytes) == 2) {
            ptr += numBytes;

            Number* newEl = (Number*)malloc(sizeof(Number));
            newEl->coeff = coeff;
            newEl->exp = exp;
            newEl->next = NULL;
            poly2 = InsertSorted(poly2, newEl);
        }
    }

    fclose(file);

    printf("Prvi polinom: ");
    Print(poly1);
    printf("Drugi polinom: ");
    Print(poly2);

    Number* sum = Add(poly1, poly2);
    printf("Zbroj polinoma: ");
    Print(sum);

    Number* product = Multiply(poly1, poly2);
    printf("Umnozak polinoma: ");
    Print(product);

    Number* current;
    while (poly1 != NULL) {
        current = poly1;
        poly1 = poly1->next;
        free(current);
    }
    while (poly2 != NULL) {
        current = poly2;
        poly2 = poly2->next;
        free(current);
    }
    while (sum != NULL) {
        current = sum;
        sum = sum->next;
        free(current);
    }
    while (product != NULL) {
        current = product;
        product = product->next;
        free(current);
    }

    return 0;
}
